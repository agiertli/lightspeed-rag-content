# Optimizing networking


OVN-Kubernetes uses Generic Network Virtualization Encapsulation (Geneve) a protocol similar to Geneve to tunnel traffic between nodes. This network can be tuned by using network interface controller (NIC) offloads.
Geneve provides benefits over VLANs, such as an increase in networks from 4096 to over 16 million, and layer 2 connectivity across physical networks. This allows for all pods behind a service to communicate with each other, even if they are running on different systems.
Geneve encapsulates all tunneled traffic in user datagram protocol (UDP) packets. However, this leads to increased CPU utilization. Both these outer- and
inner-packets are subject to normal checksumming rules to guarantee data is not corrupted during transit. Depending on CPU performance, this additional
processing overhead can cause a reduction in throughput and increased latency when compared to traditional, non-overlay networks.
Cloud, VM, and bare metal CPU performance can be capable of handling much more than one Gbps network throughput. When using higher bandwidth links such as 10 or 40 Gbps, reduced performance can occur. This is a known issue in Geneve-based environments and is not specific to containers or Red Hat OpenShift Container Platform. Any network that relies on Geneve or VXLAN tunnels will perform similarly because of the tunnel implementation.
If you are looking to push beyond one Gbps, you can:
* Evaluate network plugins that implement different routing techniques, such as border gateway protocol (BGP).
* Use Geneve-offload capable network adapters. Geneve-offload moves the packet checksum calculation and associated CPU overhead off of the system CPU and onto dedicated hardware on the network adapter. This frees up CPU cycles for use by pods and applications, and allows users to utilize the full bandwidth of their network infrastructure.
Geneve-offload does not reduce latency. However, CPU utilization is reduced even in latency tests.

# Optimizing the MTU for your network

There are two important maximum transmission units (MTUs): the network interface controller (NIC) MTU and the cluster network MTU.

The NIC MTU is configured at the time of Red Hat OpenShift Container Platform installation, and you can also change the cluster&#8217;s MTU as a Day 2 operation. See "Changing cluster network MTU" for more information. The MTU must be less than or equal to the maximum supported value of the NIC of your network. If you are optimizing for throughput, choose the largest possible value. If you are optimizing for lowest latency, choose a lower value.

For OVN and Geneve, the MTU must be less than the NIC MTU by 100 bytes at a minimum.

* Changing cluster network MTU

# Recommended practices for installing large scale clusters

When installing large clusters or scaling the cluster to larger node counts,
set the cluster network cidr accordingly in your install-config.yaml
file before you install the cluster:


```yaml
networking:
  clusterNetwork:
  - cidr: 10.128.0.0/14
    hostPrefix: 23
  machineNetwork:
  - cidr: 10.0.0.0/16
  networkType: OVNKubernetes
  serviceNetwork:
  - 172.30.0.0/16
```


The default cluster network cidr 10.128.0.0/14 cannot be used if the cluster
size is more than 500 nodes. It must be set to 10.128.0.0/12 or
10.128.0.0/10 to get to larger node counts beyond 500 nodes.

# Impact of IPsec

Because encrypting and decrypting node hosts uses CPU power, performance is affected both in throughput and CPU usage on the nodes when encryption is enabled, regardless of the IP security system being used.

IPSec encrypts traffic at the IP payload level, before it hits the NIC, protecting fields that would otherwise be used for NIC offloading. This means that some NIC acceleration features might not be usable when IPSec is enabled and will lead to decreased throughput and increased CPU usage.

# Additional resources

* Specifying advanced network configuration
* Cluster Network Operator configuration
* Improving cluster stability in high latency environments using worker latency profiles